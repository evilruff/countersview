Комментарии к тестовому заданию
-------------------------------

- Тестовое задание реализовано с использованием Qt framework версии 6.6.3 и Microsoft Visual Studio 2022

- Файлы проекта предоставлены в виде CMakeLists.txt и countersview.pro для использования с cmake и qmake соотвественно

	Для генерации проекта с использованием cmake:
	cmake -B build -G "Visual Studio 17 2022" -DCMAKE_PREFIX_PATH=<путь к исталляции Qt>
	
	Для генерации проекта с использованием qmake:
	qmake.exe -t vcapp countersview.pro

- Ограничения

	Отсутствие диагностики и визуализации ошибок при работе с базой - не специфицировалось в техническом задании
	Инкрементирущий поток работает с приоритетом по умолчанию - не специфицировалось в техническом задании
	Визуализация значений счетчиков ограничена реализаций модели скоростью 2 раза в секунду, что позволяет сохранить отзывчивость интерфейса пользователя

- Общая концепция

	Счетчики организованы в виде вектора целочисленных значений
	Расчет суммы осуществляется одновременно с инкрементирование, что позволяет повысить производительность и значительно уменьшить использование мьютекса, 
	защищающего массив.
	Для этих же целей кешируется размер размер массива счетчиков в переменной m_nRows
	Текущая сумма представлена std::atomic для того, чтобы отказаться от кода синхронизации
	Реализовано три "модуля" - модель - CountersModel, view/controller - CountersView и интерфейс к хранению данных - CountersStorage

- NOTE

	Фактически "значение" предложенной для расчеты частоты равно количеству счетчиков * на рейт работы потока

- screenshot.png - пример работы

